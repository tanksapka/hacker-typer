const codeItems = [
  "from",
  "__future__",
  "import",
  "absolute_import\n",
  "import",
  "operator\n",
  "import",
  "socket\n",
  "import",
  "struct\n",
  "import",
  "time\n",
  "import",
  "warnings\n",
  "\n",
  "from",
  "scapy.arch",
  "import",
  "get_if_addr,",
  "get_if_addr6\n",
  "from",
  "scapy.ansmachine",
  "import",
  "AnsweringMachine\n",
  "from",
  "scapy.base_classes",
  "import",
  "Net\n",
  "from",
  "scapy.config",
  "import",
  "conf\n",
  "from",
  "scapy.compat",
  "import",
  "orb,",
  "raw,",
  "chb,",
  "bytes_encode,",
  "plain_str\n",
  "from",
  "scapy.error",
  "import",
  "log_runtime,",
  "warning,",
  "Scapy_Exception\n",
  "from",
  "scapy.packet",
  "import",
  "Packet,",
  "bind_layers,",
  "NoPayload,",
  "Raw\n",
  "from",
  "scapy.fields",
  "import",
  "BitEnumField,",
  "BitField,",
  "ByteEnumField,",
  "ByteField,",
  "\\\n",
  "    ConditionalField,",
  "Field,",
  "FieldLenField,",
  "FlagsField,",
  "IntField,",
  "\\\n",
  "    PacketListField,",
  "ShortEnumField,",
  "ShortField,",
  "StrField,",
  "\\\n",
  "    StrLenField,",
  "MultipleTypeField,",
  "UTCTimeField,",
  "I\n",
  "from",
  "scapy.sendrecv",
  "import",
  "sr1\n",
  "from",
  "scapy.pton_ntop",
  "import",
  "inet_ntop,",
  "inet_pton\n",
  "\n",
  "from",
  "scapy.layers.inet",
  "import",
  "IP,",
  "DestIPField,",
  "IPField,",
  "UDP,",
  "TCP\n",
  "from",
  "scapy.layers.inet6",
  "import",
  "IPv6,",
  "DestIP6Field,",
  "IP6Field\n",
  "import",
  "scapy.libs.six",
  "as",
  "six\n",
  "\n",
  "\n",
  "from",
  "scapy.compat",
  "import",
  "(\n",
  "    Any,\n",
  "    Optional,\n",
  "    Tuple,\n",
  "    Type,\n",
  "    Union,\n",
  ")\n",
  "\n",
  "\n",
  "dnstypes",
  "=",
  "{\n",
  "    0:",
  '"ANY",\n',
  "    1:",
  '"A",',
  "2:",
  '"NS",',
  "3:",
  '"MD",',
  "4:",
  '"MF",',
  "5:",
  '"CNAME",',
  "6:",
  '"SOA",',
  "7:",
  '"MB",',
  "8:",
  '"MG",\n',
  "    9:",
  '"MR",',
  "10:",
  '"NULL",',
  "11:",
  '"WKS",',
  "12:",
  '"PTR",',
  "13:",
  '"HINFO",',
  "14:",
  '"MINFO",\n',
  "    15:",
  '"MX",',
  "16:",
  '"TXT",',
  "17:",
  '"RP",',
  "18:",
  '"AFSDB",',
  "19:",
  '"X25",',
  "20:",
  '"ISDN",\n',
  "    21:",
  '"RT",',
  "22:",
  '"NSAP",',
  "23:",
  '"NSAP-PTR",',
  "24:",
  '"SIG",',
  "25:",
  '"KEY",',
  "26:",
  '"PX",\n',
  "    27:",
  '"GPOS",',
  "28:",
  '"AAAA",',
  "29:",
  '"LOC",',
  "30:",
  '"NXT",',
  "31:",
  '"EID",',
  "32:",
  '"NIMLOC",\n',
  "    33:",
  '"SRV",',
  "34:",
  '"ATMA",',
  "35:",
  '"NAPTR",',
  "36:",
  '"KX",',
  "37:",
  '"CERT",',
  "38:",
  '"A6",\n',
  "    39:",
  '"DNAME",',
  "40:",
  '"SINK",',
  "41:",
  '"OPT",',
  "42:",
  '"APL",',
  "43:",
  '"DS",',
  "44:",
  '"SSHFP",\n',
  "    45:",
  '"IPSECKEY",',
  "46:",
  '"RRSIG",',
  "47:",
  '"NSEC",',
  "48:",
  '"DNSKEY",',
  "49:",
  '"DHCID",\n',
  "    50:",
  '"NSEC3",',
  "51:",
  '"NSEC3PARAM",',
  "52:",
  '"TLSA",',
  "53:",
  '"SMIMEA",',
  "55:",
  '"HIP",\n',
  "    56:",
  '"NINFO",',
  "57:",
  '"RKEY",',
  "58:",
  '"TALINK",',
  "59:",
  '"CDS",',
  "60:",
  '"CDNSKEY",\n',
  "    61:",
  '"OPENPGPKEY",',
  "62:",
  '"CSYNC",',
  "63:",
  '"ZONEMD",',
  "64:",
  '"SVCB",',
  "65:",
  '"HTTPS",\n',
  "    99:",
  '"SPF",',
  "100:",
  '"UINFO",',
  "101:",
  '"UID",',
  "102:",
  '"GID",',
  "103:",
  '"UNSPEC",',
  "104:",
  '"NID",\n',
  "    105:",
  '"L32",',
  "106:",
  '"L64",',
  "107:",
  '"LP",',
  "108:",
  '"EUI48",',
  "109:",
  '"EUI64",',
  "249:",
  '"TKEY",\n',
  "    250:",
  '"TSIG",',
  "256:",
  '"URI",',
  "257:",
  '"CAA",',
  "258:",
  '"AVC",',
  "259:",
  '"DOA",\n',
  "    260:",
  '"AMTRELAY",',
  "32768:",
  '"TA",',
  "32769:",
  '"DLV",',
  "65535:",
  '"RESERVED"\n',
  "}\n",
  "\n",
  "\n",
  "dnsqtypes",
  "=",
  "{251:",
  '"IXFR",',
  "252:",
  '"AXFR",',
  "253:",
  '"MAILB",',
  "254:",
  '"MAILA",',
  "255:",
  '"ALL"}\n',
  "dnsqtypes.update(dnstypes)\n",
  "dnsclasses",
  "=",
  "{1:",
  "'IN',",
  "2:",
  "'CS',",
  "3:",
  "'CH',",
  "4:",
  "'HS',",
  "255:",
  "'ANY'}\n",
  "\n",
  "\n",
  "def",
  "dns_get_str(s,",
  "pointer=0,",
  "pkt=None,",
  "_fullpacket=False):\n",
  "    max_length",
  "=",
  "len(s)\n",
  "    name",
  "=",
  'b""\n',
  "    after_pointer",
  "=",
  "None\n",
  "    processed_pointers",
  "=",
  "[]\n",
  "    if",
  "pkt",
  "and",
  "hasattr(pkt,",
  '"_orig_s")',
  "and",
  "pkt._orig_s:\n",
  "        s_full",
  "=",
  "pkt._orig_s\n",
  "    else:\n",
  "        s_full",
  "=",
  "None\n",
  "    bytes_left",
  "=",
  "None\n",
  "    while",
  "True:\n",
  "        if",
  "abs(pointer)",
  ">=",
  "max_length:\n",
  "            log_runtime.info(\n",
  '                "DNS',
  "RR",
  "prematured",
  "end",
  "(ofs=%i,",
  'len=%i)",',
  "pointer,",
  "len(s)\n",
  "            )\n",
  "            break\n",
  "        cur",
  "=",
  "orb(s[pointer])\n",
  "        pointer",
  "+=",
  "1\n",
  "        if",
  "cur",
  "&",
  "0xc0:\n",
  "            if",
  "after_pointer",
  "is",
  "None:\n",
  "                after_pointer",
  "=",
  "pointer",
  "+",
  "1\n",
  "            if",
  "pointer",
  ">=",
  "max_length:\n",
  "                log_runtime.info(\n",
  '                    "DNS',
  "incomplete",
  "jump",
  "token",
  "at",
  '(ofs=%i)",',
  "pointer\n",
  "                )\n",
  "                break\n",
  "            pointer",
  "=",
  "((cur",
  "&",
  "~0xc0)",
  "<<",
  "8)",
  "+",
  "orb(s[pointer])",
  "-",
  "12\n",
  "            if",
  "pointer",
  "in",
  "processed_pointers:\n",
  '                warning("DNS',
  "decompression",
  "loop",
  'detected")\n',
  "                break\n",
  "            if",
  "not",
  "_fullpacket:\n",
  "                if",
  "s_full:\n",
  "                    bytes_left",
  "=",
  "s[after_pointer:]\n",
  "                    s",
  "=",
  "s_full\n",
  "                    max_length",
  "=",
  "len(s)\n",
  "                    _fullpacket",
  "=",
  "True\n",
  "                else:\n",
  "                    raise",
  'Scapy_Exception("DNS',
  "message",
  "can't",
  "be",
  "compressed",
  '"',
  "+\n",
  '                                          "at',
  "this",
  'point!")\n',
  "            processed_pointers.append(pointer)\n",
  "            continue\n",
  "        elif",
  "cur",
  ">",
  "0:\n",
  "            name",
  "+=",
  "s[pointer:pointer",
  "+",
  "cur]",
  "+",
  'b"."\n',
  "            pointer",
  "+=",
  "cur\n",
  "        else:\n",
  "            break\n",
  "    if",
  "after_pointer",
  "is",
  "not",
  "None:\n",
  "        pointer",
  "=",
  "after_pointer\n",
  "    if",
  "bytes_left",
  "is",
  "None:\n",
  "        bytes_left",
  "=",
  "s[pointer:]\n",
  "    return",
  "name,",
  "pointer,",
  "bytes_left,",
  "len(processed_pointers)",
  "!=",
  "0\n",
  "\n",
  "\n",
  "def",
  "_is_ptr(x):\n",
  "    return",
  'b"."',
  "not",
  "in",
  "x",
  "and",
  "(\n",
  "        (x",
  "and",
  "orb(x[-1])",
  "==",
  "0)",
  "or\n",
  "        (len(x)",
  ">=",
  "2",
  "and",
  "(orb(x[-2])",
  "&",
  "0xc0)",
  "==",
  "0xc0)\n",
  "    )\n",
  "\n",
  "\n",
  "def",
  "dns_encode(x,",
  "check_built=False):\n",
  "    if",
  "not",
  "x",
  "or",
  "x",
  "==",
  'b".":\n',
  "        return",
  'b"\\x00"\n',
  "\n",
  "    if",
  "check_built",
  "and",
  "_is_ptr(x):\n",
  "        return",
  "x\n",
  "\n",
  "    x",
  "=",
  'b"".join(chb(len(y))',
  "+",
  "y",
  "for",
  "y",
  "in",
  "(k[:63]",
  "for",
  "k",
  "in",
  'x.split(b".")))\n',
  "    if",
  "x[-1:]",
  "!=",
  'b"\\x00":\n',
  "        x",
  "+=",
  'b"\\x00"\n',
  "    return",
  "x\n",
  "\n",
  "\n",
  "def",
  "DNSgetstr(*args,",
  "**kwargs):\n",
  "    warnings.warn(\n",
  '        "DNSgetstr',
  "is",
  "deprecated.",
  "Use",
  "dns_get_str",
  'instead.",\n',
  "        DeprecationWarning\n",
  "    )\n",
  "    return",
  "dns_get_str(*args,",
  "**kwargs)[:-1]\n",
  "\n",
  "\n",
  "def",
  "dns_compress(pkt):\n",
  "    if",
  "DNS",
  "not",
  "in",
  "pkt:\n",
  "        raise",
  'Scapy_Exception("Can',
  "only",
  "compress",
  "DNS",
  'layers")\n',
  "    pkt",
  "=",
  "pkt.copy()\n",
  "    dns_pkt",
  "=",
  "pkt.getlayer(DNS)\n",
  "    dns_pkt.clear_cache()\n",
  "    build_pkt",
  "=",
  "raw(dns_pkt)\n",
  "\n",
  "    def",
  "field_gen(dns_pkt):\n",
  "        for",
  "lay",
  "in",
  "[dns_pkt.qd,",
  "dns_pkt.an,",
  "dns_pkt.ns,",
  "dns_pkt.ar]:\n",
  "            if",
  "lay",
  "is",
  "None:\n",
  "                continue\n",
  "            current",
  "=",
  "lay\n",
  "            while",
  "not",
  "isinstance(current,",
  "NoPayload):\n",
  "                if",
  "isinstance(current,",
  "InheritOriginDNSStrPacket):\n",
  "                    for",
  "field",
  "in",
  "current.fields_desc:\n",
  "                        if",
  "isinstance(field,",
  "DNSStrField)",
  "or",
  "\\\n",
  "                           (isinstance(field,",
  "MultipleTypeField)",
  "and\n",
  "                           current.type",
  "in",
  "[2,",
  "3,",
  "4,",
  "5,",
  "12,",
  "15]):\n",
  "                            dat",
  "=",
  "current.getfieldval(field.name)\n",
  "                            yield",
  "current,",
  "field.name,",
  "dat\n",
  "                current",
  "=",
  "current.payload\n",
  "\n",
  "    def",
  "possible_shortens(dat):\n",
  "        yield",
  "dat\n",
  "        for",
  "x",
  "in",
  "range(1,",
  'dat.count(b".")):\n',
  "            yield",
  'dat.split(b".",',
  "x)[x]\n",
  "    data",
  "=",
  "{}\n",
  "    for",
  "current,",
  "name,",
  "dat",
  "in",
  "field_gen(dns_pkt):\n",
  "        for",
  "part",
  "in",
  "possible_shortens(dat):\n",
  "            encoded",
  "=",
  "dns_encode(part,",
  "check_built=True)\n",
  "            if",
  "part",
  "not",
  "in",
  "data:\n",
  "                index",
  "=",
  "build_pkt.index(encoded)\n",
  "                fb_index",
  "=",
  "((index",
  ">>",
  "8)",
  "|",
  "0xc0)\n",
  "                sb_index",
  "=",
  "index",
  "-",
  "(256",
  "*",
  "(fb_index",
  "-",
  "0xc0))\n",
  "                pointer",
  "=",
  "chb(fb_index)",
  "+",
  "chb(sb_index)\n",
  "                data[part]",
  "=",
  "[(current,",
  "name,",
  "pointer,",
  "index",
  "+",
  "1)]\n",
  "            else:\n",
  "                data[part].append((current,",
  "name))\n",
  "                _in",
  "=",
  "data[part][0][3]\n",
  "                build_pkt",
  "=",
  "build_pkt[:_in]",
  "+",
  "build_pkt[_in:].replace(\n",
  "                    encoded,\n",
  '                    b"\\0\\0",\n',
  "                    1\n",
  "                )\n",
  "                break\n",
  "    for",
  "ck",
  "in",
  "data:\n",
  "        replacements",
  "=",
  "data[ck]\n",
  "        replace_pointer",
  "=",
  "replacements.pop(0)[2]\n",
  "        for",
  "rep",
  "in",
  "replacements:\n",
  "            val",
  "=",
  "rep[0].getfieldval(rep[1])\n",
  "            assert",
  "val.endswith(ck)\n",
  "            kept_string",
  "=",
  "dns_encode(val[:-len(ck)],",
  "check_built=True)[:-1]\n",
  "            new_val",
  "=",
  "kept_string",
  "+",
  "replace_pointer\n",
  "            rep[0].setfieldval(rep[1],",
  "new_val)\n",
  "            try:\n",
  "                del",
  "rep[0].rdlen\n",
  "            except",
  "AttributeError:\n",
  "                pass\n",
  "    if",
  "not",
  "isinstance(pkt,",
  "DNS)",
  "and",
  "pkt.getlayer(DNS).underlayer:\n",
  "        pkt.getlayer(DNS).underlayer.remove_payload()\n",
  "        return",
  "pkt",
  "/",
  "dns_pkt\n",
  "    return",
  "dns_pkt\n",
  "\n",
  "\n",
  "class",
  "InheritOriginDNSStrPacket(Packet):\n",
  "    __slots__",
  "=",
  "Packet.__slots__",
  "+",
  '["_orig_s",',
  '"_orig_p"]\n',
  "\n",
  "    def",
  "__init__(self,",
  "_pkt=None,",
  "_orig_s=None,",
  "_orig_p=None,",
  "*args,",
  "**kwargs):\n",
  "        self._orig_s",
  "=",
  "_orig_s\n",
  "        self._orig_p",
  "=",
  "_orig_p\n",
  "        Packet.__init__(self,",
  "_pkt=_pkt,",
  "*args,",
  "**kwargs)\n",
  "\n",
  "\n",
  "class",
  "DNSStrField(StrLenField):\n",
  "    __slots__",
  "=",
  '["compressed"]\n',
  "\n",
  "    def",
  "h2i(self,",
  "pkt,",
  "x):\n",
  "        if",
  "not",
  "x:\n",
  "            return",
  'b"."\n',
  "        if",
  "x[-1:]",
  "!=",
  'b"."',
  "and",
  "not",
  "_is_ptr(x):\n",
  "            return",
  "x",
  "+",
  'b"."\n',
  "        return",
  "x\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "x):\n",
  "        return",
  "dns_encode(x,",
  "check_built=True)\n",
  "\n",
  "    def",
  "i2len(self,",
  "pkt,",
  "x):\n",
  "        return",
  "len(self.i2m(pkt,",
  "x))\n",
  "\n",
  "    def",
  "getfield(self,",
  "pkt,",
  "s):\n",
  "        remain",
  "=",
  'b""\n',
  "        if",
  "self.length_from:\n",
  "            remain,",
  "s",
  "=",
  "super(DNSStrField,",
  "self).getfield(pkt,",
  "s)\n",
  "        decoded,",
  "_,",
  "left,",
  "self.compressed",
  "=",
  "dns_get_str(s,",
  "0,",
  "pkt)\n",
  "        return",
  "left",
  "+",
  "remain,",
  "decoded\n",
  "\n",
  "\n",
  "class",
  "DNSRRCountField(ShortField):\n",
  "    __slots__",
  "=",
  '["rr"]\n',
  "\n",
  "    def",
  "__init__(self,",
  "name,",
  "default,",
  "rr):\n",
  "        ShortField.__init__(self,",
  "name,",
  "default)\n",
  "        self.rr",
  "=",
  "rr\n",
  "\n",
  "    def",
  "_countRR(self,",
  "pkt):\n",
  "        x",
  "=",
  "getattr(pkt,",
  "self.rr)\n",
  "        i",
  "=",
  "0\n",
  "        while",
  "isinstance(x,",
  "(DNSRR,",
  "DNSQR))",
  "or",
  "isdnssecRR(x):\n",
  "            x",
  "=",
  "x.payload\n",
  "            i",
  "+=",
  "1\n",
  "        return",
  "i\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "x):\n",
  "        if",
  "x",
  "is",
  "None:\n",
  "            x",
  "=",
  "self._countRR(pkt)\n",
  "        return",
  "x\n",
  "\n",
  "    def",
  "i2h(self,",
  "pkt,",
  "x):\n",
  "        if",
  "x",
  "is",
  "None:\n",
  "            x",
  "=",
  "self._countRR(pkt)\n",
  "        return",
  "x\n",
  "\n",
  "\n",
  "class",
  "DNSRRField(StrField):\n",
  "    __slots__",
  "=",
  '["countfld",',
  '"passon",',
  '"rr"]\n',
  "    holds_packets",
  "=",
  "1\n",
  "\n",
  "    def",
  "__init__(self,",
  "name,",
  "countfld,",
  "default,",
  "passon=1):\n",
  "        StrField.__init__(self,",
  "name,",
  "None)\n",
  "        self.countfld",
  "=",
  "countfld\n",
  "        self.rr",
  "=",
  "self.default",
  "=",
  "default\n",
  "        self.passon",
  "=",
  "passon\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "x):\n",
  "        if",
  "x",
  "is",
  "None:\n",
  "            return",
  'b""\n',
  "        return",
  "bytes_encode(x)\n",
  "\n",
  "    def",
  "decodeRR(self,",
  "name,",
  "s,",
  "p):\n",
  "        ret",
  "=",
  "s[p:p",
  "+",
  "10]\n",
  "        typ,",
  "cls,",
  "_,",
  "rdlen",
  "=",
  'struct.unpack("!HHIH",',
  "ret)\n",
  "        p",
  "+=",
  "10\n",
  "        cls",
  "=",
  "DNSRR_DISPATCHER.get(typ,",
  "DNSRR)\n",
  "        rr",
  "=",
  'cls(b"\\x00"',
  "+",
  "ret",
  "+",
  "s[p:p",
  "+",
  "rdlen],",
  "_orig_s=s,",
  "_orig_p=p)\n",
  "\n",
  "        for",
  "fname",
  "in",
  "rr.fieldtype.keys():\n",
  "            rdata_obj",
  "=",
  "rr.fieldtype[fname]\n",
  "            if",
  "fname",
  "==",
  '"rdata"',
  "and",
  "isinstance(rdata_obj,",
  "MultipleTypeField):\n",
  "                rdata_obj",
  "=",
  "rdata_obj._find_fld_pkt_val(rr,",
  "rr.type)[0]\n",
  "            if",
  "isinstance(rdata_obj,",
  "DNSStrField)",
  "and",
  "rdata_obj.compressed:\n",
  "                del",
  "rr.rdlen\n",
  "                break\n",
  "        rr.rrname",
  "=",
  "name\n",
  "\n",
  "        p",
  "+=",
  "rdlen\n",
  "        return",
  "rr,",
  "p\n",
  "\n",
  "    def",
  "getfield(self,",
  "pkt,",
  "s):\n",
  "        if",
  "isinstance(s,",
  "tuple):\n",
  "            s,",
  "p",
  "=",
  "s\n",
  "        else:\n",
  "            p",
  "=",
  "0\n",
  "        ret",
  "=",
  "None\n",
  "        c",
  "=",
  "getattr(pkt,",
  "self.countfld)\n",
  "        if",
  "c",
  ">",
  "len(s):\n",
  '            log_runtime.info("DNS',
  "wrong",
  "value:",
  'DNS.%s=%i",',
  "self.countfld,",
  "c)\n",
  "            return",
  "s,",
  'b""\n',
  "        while",
  "c:\n",
  "            c",
  "-=",
  "1\n",
  "            name,",
  "p,",
  "_,",
  "_",
  "=",
  "dns_get_str(s,",
  "p,",
  "_fullpacket=True)\n",
  "            rr,",
  "p",
  "=",
  "self.decodeRR(name,",
  "s,",
  "p)\n",
  "            if",
  "ret",
  "is",
  "None:\n",
  "                ret",
  "=",
  "rr\n",
  "            else:\n",
  "                ret.add_payload(rr)\n",
  "        if",
  "self.passon:\n",
  "            return",
  "(s,",
  "p),",
  "ret\n",
  "        else:\n",
  "            return",
  "s[p:],",
  "ret\n",
  "\n",
  "\n",
  "class",
  "DNSQRField(DNSRRField):\n",
  "    def",
  "decodeRR(self,",
  "name,",
  "s,",
  "p):\n",
  "        ret",
  "=",
  "s[p:p",
  "+",
  "4]\n",
  "        p",
  "+=",
  "4\n",
  "        rr",
  "=",
  'DNSQR(b"\\x00"',
  "+",
  "ret,",
  "_orig_s=s,",
  "_orig_p=p)\n",
  "        rr.qname",
  "=",
  "name\n",
  "        return",
  "rr,",
  "p\n",
  "\n",
  "\n",
  "class",
  "DNSTextField(StrLenField):\n",
  "    islist",
  "=",
  "1\n",
  "\n",
  "    def",
  "m2i(self,",
  "pkt,",
  "s):\n",
  "        ret_s",
  "=",
  "list()\n",
  "        tmp_s",
  "=",
  "s\n",
  "        while",
  "tmp_s:\n",
  "            tmp_len",
  "=",
  "orb(tmp_s[0])",
  "+",
  "1\n",
  "            if",
  "tmp_len",
  ">",
  "len(tmp_s):\n",
  "                log_runtime.info(\n",
  '                    "DNS',
  "RR",
  "TXT",
  "prematured",
  "end",
  "of",
  "character-string",
  '"\n',
  '                    "(size=%i,',
  "remaining",
  'bytes=%i)",',
  "tmp_len,",
  "len(tmp_s)\n",
  "                )\n",
  "            ret_s.append(tmp_s[1:tmp_len])\n",
  "            tmp_s",
  "=",
  "tmp_s[tmp_len:]\n",
  "        return",
  "ret_s\n",
  "\n",
  "    def",
  "any2i(self,",
  "pkt,",
  "x):\n",
  "        if",
  "isinstance(x,",
  "(str,",
  "bytes)):\n",
  "            return",
  "[x]\n",
  "        return",
  "x\n",
  "\n",
  "    def",
  "i2len(self,",
  "pkt,",
  "x):\n",
  "        return",
  "len(self.i2m(pkt,",
  "x))\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "s):\n",
  "        ret_s",
  "=",
  'b""\n',
  "        for",
  "text",
  "in",
  "s:\n",
  "            text",
  "=",
  "bytes_encode(text)\n",
  "            while",
  "len(text)",
  ">=",
  "255:\n",
  "                ret_s",
  "+=",
  'b"\\xff"',
  "+",
  "text[:255]\n",
  "                text",
  "=",
  "text[255:]\n",
  "            if",
  "len(text):\n",
  "                ret_s",
  "+=",
  'struct.pack("!B",',
  "len(text))",
  "+",
  "text\n",
  "        return",
  "ret_s\n",
  "\n",
  "\n",
  "class",
  "DNSQR(InheritOriginDNSStrPacket):\n",
  "    name",
  "=",
  '"DNS',
  "Question",
  'Record"\n',
  "    show_indent",
  "=",
  "0\n",
  "    fields_desc",
  "=",
  '[DNSStrField("qname",',
  '"www.example.com"),\n',
  '                   ShortEnumField("qtype",',
  "1,",
  "dnsqtypes),\n",
  '                   ShortEnumField("qclass",',
  "1,",
  "dnsclasses)]\n",
  "\n",
  "\n",
  "class",
  "DNS(Packet):\n",
  "    name",
  "=",
  '"DNS"\n',
  "    fields_desc",
  "=",
  "[\n",
  '        ConditionalField(ShortField("length",',
  "None),\n",
  "                         lambda",
  "p:",
  "isinstance(p.underlayer,",
  "TCP)),\n",
  '        ShortField("id",',
  "0),\n",
  '        BitField("qr",',
  "0,",
  "1),\n",
  '        BitEnumField("opcode",',
  "0,",
  "4,",
  "{0:",
  '"QUERY",',
  "1:",
  '"IQUERY",',
  "2:",
  '"STATUS"}),\n',
  '        BitField("aa",',
  "0,",
  "1),\n",
  '        BitField("tc",',
  "0,",
  "1),\n",
  '        BitField("rd",',
  "1,",
  "1),\n",
  '        BitField("ra",',
  "0,",
  "1),\n",
  '        BitField("z",',
  "0,",
  "1),\n",
  '        BitField("ad",',
  "0,",
  "1),\n",
  '        BitField("cd",',
  "0,",
  "1),\n",
  '        BitEnumField("rcode",',
  "0,",
  "4,",
  "{0:",
  '"ok",',
  "1:",
  '"format-error",\n',
  "                                     2:",
  '"server-failure",',
  "3:",
  '"name-error",\n',
  "                                     4:",
  '"not-implemented",',
  "5:",
  '"refused"}),\n',
  '        DNSRRCountField("qdcount",',
  "None,",
  '"qd"),\n',
  '        DNSRRCountField("ancount",',
  "None,",
  '"an"),\n',
  '        DNSRRCountField("nscount",',
  "None,",
  '"ns"),\n',
  '        DNSRRCountField("arcount",',
  "None,",
  '"ar"),\n',
  '        DNSQRField("qd",',
  '"qdcount",',
  "DNSQR()),\n",
  '        DNSRRField("an",',
  '"ancount",',
  "None),\n",
  '        DNSRRField("ns",',
  '"nscount",',
  "None),\n",
  '        DNSRRField("ar",',
  '"arcount",',
  "None,",
  "0),\n",
  "    ]\n",
  "\n",
  "    def",
  "answers(self,",
  "other):\n",
  "        return",
  "(isinstance(other,",
  "DNS)",
  "and\n",
  "                self.id",
  "==",
  "other.id",
  "and\n",
  "                self.qr",
  "==",
  "1",
  "and\n",
  "                other.qr",
  "==",
  "0)\n",
  "\n",
  "    def",
  "mysummary(self):\n",
  "        name",
  "=",
  '""\n',
  "        if",
  "self.qr:\n",
  "            type",
  "=",
  '"Ans"\n',
  "            if",
  "self.ancount",
  ">",
  "0",
  "and",
  "isinstance(self.an,",
  "DNSRR):\n",
  "                name",
  "=",
  "'",
  '"%s"\'',
  "%",
  "self.an.rdata\n",
  "        else:\n",
  "            type",
  "=",
  '"Qry"\n',
  "            if",
  "self.qdcount",
  ">",
  "0",
  "and",
  "isinstance(self.qd,",
  "DNSQR):\n",
  "                name",
  "=",
  "'",
  '"%s"\'',
  "%",
  "self.qd.qname\n",
  "        return",
  "'DNS",
  "%s%s",
  "'",
  "%",
  "(type,",
  "name)\n",
  "\n",
  "    def",
  "post_build(self,",
  "pkt,",
  "pay):\n",
  "        if",
  "isinstance(self.underlayer,",
  "TCP)",
  "and",
  "self.length",
  "is",
  "None:\n",
  "            pkt",
  "=",
  'struct.pack("!H",',
  "len(pkt)",
  "-",
  "2)",
  "+",
  "pkt[2:]\n",
  "        return",
  "pkt",
  "+",
  "pay\n",
  "\n",
  "    def",
  "compress(self):\n",
  "        return",
  "dns_compress(self)\n",
  "\n",
  "    def",
  "pre_dissect(self,",
  "s):\n",
  "        if",
  "isinstance(self.underlayer,",
  "TCP):\n",
  "\n",
  "            if",
  "len(s)",
  ">=",
  "2:\n",
  "                dns_len",
  "=",
  'struct.unpack("!H",',
  "s[:2])[0]\n",
  "            else:\n",
  "                message",
  "=",
  '"Malformed',
  "DNS",
  "message:",
  "too",
  'small!"\n',
  "                log_runtime.info(message)\n",
  "                raise",
  "Scapy_Exception(message)\n",
  "\n",
  "            if",
  "dns_len",
  "<",
  "14",
  "or",
  "len(s)",
  "<",
  "dns_len:\n",
  "                message",
  "=",
  '"Malformed',
  "DNS",
  "message:",
  "invalid",
  'length!"\n',
  "                log_runtime.info(message)\n",
  "                raise",
  "Scapy_Exception(message)\n",
  "\n",
  "        return",
  "s\n",
  "\n",
  "\n",
  "edns0types",
  "=",
  "{0:",
  '"Reserved",',
  "1:",
  '"LLQ",',
  "2:",
  '"UL",',
  "3:",
  '"NSID",',
  "4:",
  '"Reserved",\n',
  "              5:",
  '"PING",',
  "8:",
  '"edns-client-subnet"}\n',
  "\n",
  "\n",
  "class",
  "EDNS0TLV(Packet):\n",
  "    name",
  "=",
  '"DNS',
  "EDNS0",
  'TLV"\n',
  "    fields_desc",
  "=",
  '[ShortEnumField("optcode",',
  "0,",
  "edns0types),\n",
  '                   FieldLenField("optlen",',
  "None,",
  '"optdata",',
  'fmt="H"),\n',
  '                   StrLenField("optdata",',
  '"",\n',
  "                               length_from=lambda",
  "pkt:",
  "pkt.optlen)]\n",
  "\n",
  "    def",
  "extract_padding(self,",
  "p):\n",
  "        return",
  '"",',
  "p\n",
  "\n",
  "    @classmethod\n",
  "    def",
  "dispatch_hook(cls,",
  "_pkt=None,",
  "*args,",
  "**kargs):\n",
  "        if",
  "_pkt",
  "is",
  "None:\n",
  "            return",
  "EDNS0TLV\n",
  "        if",
  "len(_pkt)",
  "<",
  "2:\n",
  "            return",
  "Raw\n",
  "        edns0type",
  "=",
  'struct.unpack("!H",',
  "_pkt[:2])[0]\n",
  "        if",
  "edns0type",
  "==",
  "8:\n",
  "            return",
  "EDNS0ClientSubnet\n",
  "        return",
  "EDNS0TLV\n",
  "\n",
  "\n",
  "class",
  "DNSRROPT(InheritOriginDNSStrPacket):\n",
  "    name",
  "=",
  '"DNS',
  "OPT",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "41,",
  "dnstypes),\n",
  '                   ShortField("rclass",',
  "4096),\n",
  '                   ByteField("extrcode",',
  "0),\n",
  '                   ByteField("version",',
  "0),\n",
  '                   BitEnumField("z",',
  "32768,",
  "16,",
  "{32768:",
  '"D0"}),\n',
  '                   FieldLenField("rdlen",',
  "None,",
  'length_of="rdata",',
  'fmt="H"),\n',
  '                   PacketListField("rdata",',
  "[],",
  "EDNS0TLV,\n",
  "                                   length_from=lambda",
  "pkt:",
  "pkt.rdlen)]\n",
  "\n",
  "\n",
  "class",
  "ClientSubnetv4(StrLenField):\n",
  "    af_familly",
  "=",
  "socket.AF_INET\n",
  "    af_length",
  "=",
  "32\n",
  "    af_default",
  "=",
  'b"\\xc0"\n',
  "\n",
  "    def",
  "getfield(self,",
  "pkt,",
  "s):\n",
  "        sz",
  "=",
  "operator.floordiv(self.length_from(pkt),",
  "8)\n",
  "        sz",
  "=",
  "min(sz,",
  "operator.floordiv(self.af_length,",
  "8))\n",
  "        return",
  "s[sz:],",
  "self.m2i(pkt,",
  "s[:sz])\n",
  "\n",
  "    def",
  "m2i(self,",
  "pkt,",
  "x):\n",
  "        padding",
  "=",
  "self.af_length",
  "-",
  "self.length_from(pkt)\n",
  "        if",
  "padding:\n",
  "            x",
  "+=",
  'b"\\x00"',
  "*",
  "operator.floordiv(padding,",
  "8)\n",
  "        x",
  "=",
  "x[:",
  "operator.floordiv(self.af_length,",
  "8)]\n",
  "        return",
  "inet_ntop(self.af_familly,",
  "x)\n",
  "\n",
  "    def",
  "_pack_subnet(self,",
  "subnet):\n",
  "        packed_subnet",
  "=",
  "inet_pton(self.af_familly,",
  "plain_str(subnet))\n",
  "        for",
  "i",
  "in",
  "list(range(operator.floordiv(self.af_length,",
  "8)))[::-1]:\n",
  "            if",
  "orb(packed_subnet[i])",
  "!=",
  "0:\n",
  "                i",
  "+=",
  "1\n",
  "                break\n",
  "        return",
  "packed_subnet[:i]\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "x):\n",
  "        if",
  "x",
  "is",
  "None:\n",
  "            return",
  "self.af_default\n",
  "        try:\n",
  "            return",
  "self._pack_subnet(x)\n",
  "        except",
  "(OSError,",
  "socket.error):\n",
  "            pkt.family",
  "=",
  "2\n",
  "            return",
  'ClientSubnetv6("",',
  '"")._pack_subnet(x)\n',
  "\n",
  "    def",
  "i2len(self,",
  "pkt,",
  "x):\n",
  "        if",
  "x",
  "is",
  "None:\n",
  "            return",
  "1\n",
  "        try:\n",
  "            return",
  "len(self._pack_subnet(x))\n",
  "        except",
  "(OSError,",
  "socket.error):\n",
  "            pkt.family",
  "=",
  "2\n",
  "            return",
  'len(ClientSubnetv6("",',
  '"")._pack_subnet(x))\n',
  "\n",
  "\n",
  "class",
  "ClientSubnetv6(ClientSubnetv4):\n",
  "    af_familly",
  "=",
  "socket.AF_INET6\n",
  "    af_length",
  "=",
  "128\n",
  "    af_default",
  "=",
  'b"\\x20"\n',
  "\n",
  "\n",
  "class",
  "EDNS0ClientSubnet(Packet):\n",
  "    name",
  "=",
  '"DNS',
  "EDNS0",
  "Client",
  'Subnet"\n',
  "    fields_desc",
  "=",
  '[ShortEnumField("optcode",',
  "8,",
  "edns0types),\n",
  '                   FieldLenField("optlen",',
  "None,",
  '"address",',
  'fmt="H",\n',
  "                                 adjust=lambda",
  "pkt,",
  "x:",
  "x",
  "+",
  "4),\n",
  '                   ShortField("family",',
  "1),\n",
  '                   FieldLenField("source_plen",',
  "None,\n",
  '                                 length_of="address",\n',
  '                                 fmt="B",\n',
  "                                 adjust=lambda",
  "pkt,",
  "x:",
  "x",
  "*",
  "8),\n",
  '                   ByteField("scope_plen",',
  "0),\n",
  "                   MultipleTypeField(\n",
  '                       [(ClientSubnetv4("address",',
  '"192.168.0.0",\n',
  "                         length_from=lambda",
  "p:",
  "p.source_plen),\n",
  "                         lambda",
  "pkt:",
  "pkt.family",
  "==",
  "1),\n",
  '                        (ClientSubnetv6("address",',
  '"2001:db8::",\n',
  "                         length_from=lambda",
  "p:",
  "p.source_plen),\n",
  "                         lambda",
  "pkt:",
  "pkt.family",
  "==",
  "2)],\n",
  '                       ClientSubnetv4("address",',
  '"192.168.0.0",\n',
  "                                      length_from=lambda",
  "p:",
  "p.source_plen))]\n",
  "\n",
  "\n",
  "dnssecalgotypes",
  "=",
  "{0:",
  '"Reserved",',
  "1:",
  '"RSA/MD5",',
  "2:",
  '"Diffie-Hellman",',
  "3:",
  '"DSA/SHA-1",\n',
  "                   4:",
  '"Reserved",',
  "5:",
  '"RSA/SHA-1",',
  "6:",
  '"DSA-NSEC3-SHA1",\n',
  "                   7:",
  '"RSASHA1-NSEC3-SHA1",',
  "8:",
  '"RSA/SHA-256",',
  "9:",
  '"Reserved",\n',
  "                   10:",
  '"RSA/SHA-512",',
  "11:",
  '"Reserved",',
  "12:",
  '"GOST',
  "R",
  '34.10-2001",\n',
  "                   13:",
  '"ECDSA',
  "Curve",
  "P-256",
  "with",
  'SHA-256",',
  "14:",
  '"ECDSA',
  "Curve",
  "P-384",
  "with",
  'SHA-384",\n',
  "                   252:",
  '"Reserved',
  "for",
  "Indirect",
  'Keys",',
  "253:",
  '"Private',
  "algorithms",
  "-",
  "domain",
  'name",\n',
  "                   254:",
  '"Private',
  "algorithms",
  "-",
  'OID",',
  "255:",
  '"Reserved"}\n',
  "\n",
  "\n",
  "dnssecdigesttypes",
  "=",
  "{0:",
  '"Reserved",',
  "1:",
  '"SHA-1",',
  "2:",
  '"SHA-256",',
  "3:",
  '"GOST',
  "R",
  '34.11-94",',
  "4:",
  '"SHA-384"}\n',
  "\n",
  "\n",
  "def",
  "bitmap2RRlist(bitmap):\n",
  "    RRlist",
  "=",
  "[]\n",
  "\n",
  "    while",
  "bitmap:\n",
  "\n",
  "        if",
  "len(bitmap)",
  "<",
  "2:\n",
  '            log_runtime.info("bitmap',
  "too",
  "short",
  '(%i)",',
  "len(bitmap))\n",
  "            return\n",
  "\n",
  "        window_block",
  "=",
  "orb(bitmap[0])\n",
  "        offset",
  "=",
  "256",
  "*",
  "window_block\n",
  "        bitmap_len",
  "=",
  "orb(bitmap[1])\n",
  "\n",
  "        if",
  "bitmap_len",
  "<=",
  "0",
  "or",
  "bitmap_len",
  ">",
  "32:\n",
  '            log_runtime.info("bitmap',
  "length",
  "is",
  "no",
  "valid",
  '(%i)",',
  "bitmap_len)\n",
  "            return\n",
  "\n",
  "        tmp_bitmap",
  "=",
  "bitmap[2:2",
  "+",
  "bitmap_len]\n",
  "\n",
  "        for",
  "b",
  "in",
  "range(len(tmp_bitmap)):\n",
  "            v",
  "=",
  "128\n",
  "            for",
  "i",
  "in",
  "range(8):\n",
  "                if",
  "orb(tmp_bitmap[b])",
  "&",
  "v:\n",
  "                    RRlist",
  "+=",
  "[offset",
  "+",
  "b",
  "*",
  "8",
  "+",
  "i]\n",
  "                v",
  "=",
  "v",
  ">>",
  "1\n",
  "\n",
  "        bitmap",
  "=",
  "bitmap[2",
  "+",
  "bitmap_len:]\n",
  "\n",
  "    return",
  "RRlist\n",
  "\n",
  "\n",
  "def",
  "RRlist2bitmap(lst):\n",
  "    import",
  "math\n",
  "\n",
  "    bitmap",
  "=",
  'b""\n',
  "    lst",
  "=",
  "[abs(x)",
  "for",
  "x",
  "in",
  "sorted(set(lst))",
  "if",
  "x",
  "<=",
  "65535]\n",
  "\n",
  "    max_window_blocks",
  "=",
  "int(math.ceil(lst[-1]",
  "/",
  "256.))\n",
  "    min_window_blocks",
  "=",
  "int(math.floor(lst[0]",
  "/",
  "256.))\n",
  "    if",
  "min_window_blocks",
  "==",
  "max_window_blocks:\n",
  "        max_window_blocks",
  "+=",
  "1\n",
  "\n",
  "    for",
  "wb",
  "in",
  "range(min_window_blocks,",
  "max_window_blocks",
  "+",
  "1):\n",
  "        rrlist",
  "=",
  "sorted(x",
  "for",
  "x",
  "in",
  "lst",
  "if",
  "256",
  "*",
  "wb",
  "<=",
  "x",
  "<",
  "256",
  "*",
  "(wb",
  "+",
  "1))\n",
  "        if",
  "not",
  "rrlist:\n",
  "            continue\n",
  "\n",
  "        if",
  "rrlist[-1]",
  "==",
  "0:\n",
  "            bytes_count",
  "=",
  "1\n",
  "        else:\n",
  "            max",
  "=",
  "rrlist[-1]",
  "-",
  "256",
  "*",
  "wb\n",
  "            bytes_count",
  "=",
  "int(math.ceil(max",
  "//",
  "8))",
  "+",
  "1\n",
  "        if",
  "bytes_count",
  ">",
  "32:\n",
  "            bytes_count",
  "=",
  "32\n",
  "\n",
  "        bitmap",
  "+=",
  'struct.pack("BB",',
  "wb,",
  "bytes_count)\n",
  "\n",
  "        bitmap",
  "+=",
  'b"".join(\n',
  "            struct.pack(\n",
  '                b"B",\n',
  "                sum(2",
  "**",
  "(7",
  "-",
  "(x",
  "-",
  "256",
  "*",
  "wb)",
  "+",
  "(tmp",
  "*",
  "8))",
  "for",
  "x",
  "in",
  "rrlist\n",
  "                    if",
  "256",
  "*",
  "wb",
  "+",
  "8",
  "*",
  "tmp",
  "<=",
  "x",
  "<",
  "256",
  "*",
  "wb",
  "+",
  "8",
  "*",
  "tmp",
  "+",
  "8),\n",
  "            )",
  "for",
  "tmp",
  "in",
  "range(bytes_count)\n",
  "        )\n",
  "\n",
  "    return",
  "bitmap\n",
  "\n",
  "\n",
  "class",
  "RRlistField(StrField):\n",
  "    def",
  "h2i(self,",
  "pkt,",
  "x):\n",
  "        if",
  "isinstance(x,",
  "list):\n",
  "            return",
  "RRlist2bitmap(x)\n",
  "        return",
  "x\n",
  "\n",
  "    def",
  "i2repr(self,",
  "pkt,",
  "x):\n",
  "        x",
  "=",
  "self.i2h(pkt,",
  "x)\n",
  "        rrlist",
  "=",
  "bitmap2RRlist(x)\n",
  "        return",
  "[dnstypes.get(rr,",
  "rr)",
  "for",
  "rr",
  "in",
  "rrlist]",
  "if",
  "rrlist",
  "else",
  "repr(x)\n",
  "\n",
  "\n",
  "class",
  "_DNSRRdummy(InheritOriginDNSStrPacket):\n",
  "    name",
  "=",
  '"Dummy',
  "class",
  "that",
  "implements",
  "post_build()",
  "for",
  "Resource",
  'Records"\n',
  "\n",
  "    def",
  "post_build(self,",
  "pkt,",
  "pay):\n",
  "        if",
  "self.rdlen",
  "is",
  "not",
  "None:\n",
  "            return",
  "pkt",
  "+",
  "pay\n",
  "\n",
  "        lrrname",
  "=",
  'len(self.fields_desc[0].i2m("",',
  'self.getfieldval("rrname")))\n',
  "        tmp_len",
  "=",
  "len(pkt)",
  "-",
  "lrrname",
  "-",
  "10\n",
  "        tmp_pkt",
  "=",
  "pkt[:lrrname",
  "+",
  "8]\n",
  "        pkt",
  "=",
  'struct.pack("!H",',
  "tmp_len)",
  "+",
  "pkt[lrrname",
  "+",
  "8",
  "+",
  "2:]\n",
  "\n",
  "        return",
  "tmp_pkt",
  "+",
  "pkt",
  "+",
  "pay\n",
  "\n",
  "\n",
  "class",
  "DNSRRMX(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "MX",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "6,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ShortField("preference",',
  "0),\n",
  '                   DNSStrField("exchange",',
  '""),\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRSOA(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "SOA",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "6,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   DNSStrField("mname",',
  '""),\n',
  '                   DNSStrField("rname",',
  '""),\n',
  '                   IntField("serial",',
  "0),\n",
  '                   IntField("refresh",',
  "0),\n",
  '                   IntField("retry",',
  "0),\n",
  '                   IntField("expire",',
  "0),\n",
  '                   IntField("minimum",',
  "0)\n",
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRRSIG(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "RRSIG",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "46,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ShortEnumField("typecovered",',
  "1,",
  "dnstypes),\n",
  '                   ByteEnumField("algorithm",',
  "5,",
  "dnssecalgotypes),\n",
  '                   ByteField("labels",',
  "0),\n",
  '                   IntField("originalttl",',
  "0),\n",
  '                   UTCTimeField("expiration",',
  "0),\n",
  '                   UTCTimeField("inception",',
  "0),\n",
  '                   ShortField("keytag",',
  "0),\n",
  '                   DNSStrField("signersname",',
  '""),\n',
  '                   StrField("signature",',
  '"")\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRNSEC(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "NSEC",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "47,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   DNSStrField("nextname",',
  '""),\n',
  '                   RRlistField("typebitmaps",',
  '"")\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRDNSKEY(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "DNSKEY",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "48,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   FlagsField("flags",',
  "256,",
  "16,",
  '"S???????Z???????"),\n',
  '                   ByteField("protocol",',
  "3),\n",
  '                   ByteEnumField("algorithm",',
  "5,",
  "dnssecalgotypes),\n",
  '                   StrField("publickey",',
  '"")\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRDS(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "DS",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "43,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ShortField("keytag",',
  "0),\n",
  '                   ByteEnumField("algorithm",',
  "5,",
  "dnssecalgotypes),\n",
  '                   ByteEnumField("digesttype",',
  "5,",
  "dnssecdigesttypes),\n",
  '                   StrField("digest",',
  '"")\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRDLV(DNSRRDS):\n",
  "    name",
  "=",
  '"DNS',
  "DLV",
  "Resource",
  'Record"\n',
  "\n",
  "    def",
  "__init__(self,",
  "*args,",
  "**kargs):\n",
  "        DNSRRDS.__init__(self,",
  "*args,",
  "**kargs)\n",
  "        if",
  "not",
  "kargs.get('type',",
  "0):\n",
  "            self.type",
  "=",
  "32769\n",
  "\n",
  "\n",
  "class",
  "DNSRRNSEC3(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "NSEC3",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "50,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ByteField("hashalg",',
  "0),\n",
  '                   BitEnumField("flags",',
  "0,",
  "8,",
  "{1:",
  '"Opt-Out"}),\n',
  '                   ShortField("iterations",',
  "0),\n",
  '                   FieldLenField("saltlength",',
  "0,",
  'fmt="!B",',
  'length_of="salt"),\n',
  '                   StrLenField("salt",',
  '"",',
  "length_from=lambda",
  "x:",
  "x.saltlength),\n",
  '                   FieldLenField("hashlength",',
  "0,",
  'fmt="!B",',
  'length_of="nexthashedownername"),\n',
  '                   StrLenField("nexthashedownername",',
  '"",',
  "length_from=lambda",
  "x:",
  "x.hashlength),\n",
  '                   RRlistField("typebitmaps",',
  '"")\n',
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRNSEC3PARAM(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "NSEC3PARAM",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "51,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ByteField("hashalg",',
  "0),\n",
  '                   ByteField("flags",',
  "0),\n",
  '                   ShortField("iterations",',
  "0),\n",
  '                   FieldLenField("saltlength",',
  "0,",
  'fmt="!B",',
  'length_of="salt"),\n',
  '                   StrLenField("salt",',
  '"",',
  "length_from=lambda",
  "pkt:",
  "pkt.saltlength)\n",
  "                   ]\n",
  "\n",
  "\n",
  "class",
  "DNSRRSRV(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "SRV",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "33,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   ShortField("priority",',
  "0),\n",
  '                   ShortField("weight",',
  "0),\n",
  '                   ShortField("port",',
  "0),\n",
  '                   DNSStrField("target",',
  '""),',
  "]\n",
  "\n",
  "\n",
  "tsig_algo_sizes",
  "=",
  '{"HMAC-MD5.SIG-ALG.REG.INT":',
  "16,\n",
  '                   "hmac-sha1":',
  "20}\n",
  "\n",
  "\n",
  "class",
  "TimeSignedField(Field[int,",
  "bytes]):\n",
  "    def",
  "__init__(self,",
  "name,",
  "default):\n",
  "        Field.__init__(self,",
  "name,",
  "default,",
  'fmt="6s")\n',
  "\n",
  "    def",
  "_convert_seconds(self,",
  "packed_seconds):\n",
  "        seconds",
  "=",
  'struct.unpack("!H",',
  "packed_seconds[:2])[0]\n",
  "        seconds",
  "+=",
  'struct.unpack("!I",',
  "packed_seconds[2:])[0]\n",
  "        return",
  "seconds\n",
  "\n",
  "    def",
  "i2m(self,",
  "pkt,",
  "seconds):\n",
  "        if",
  "seconds",
  "is",
  "None:\n",
  "            seconds",
  "=",
  "0\n",
  "\n",
  "        tmp_short",
  "=",
  "(seconds",
  ">>",
  "32)",
  "&",
  "0xFFFF\n",
  "        tmp_int",
  "=",
  "seconds",
  "&",
  "0xFFFFFFFF\n",
  "\n",
  "        return",
  'struct.pack("!HI",',
  "tmp_short,",
  "tmp_int)\n",
  "\n",
  "    def",
  "m2i(self,",
  "pkt,",
  "packed_seconds):\n",
  "        if",
  "packed_seconds",
  "is",
  "None:\n",
  "            return",
  "None\n",
  "\n",
  "        return",
  "self._convert_seconds(packed_seconds)\n",
  "\n",
  "    def",
  "i2repr(self,",
  "pkt,",
  "packed_seconds):\n",
  "        time_struct",
  "=",
  "time.gmtime(packed_seconds)\n",
  "        return",
  'time.strftime("%a',
  "%b",
  "%d",
  "%H:%M:%S",
  '%Y",',
  "time_struct)\n",
  "\n",
  "\n",
  "class",
  "DNSRRTSIG(_DNSRRdummy):\n",
  "    name",
  "=",
  '"DNS',
  "TSIG",
  "Resource",
  'Record"\n',
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "250,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   ShortField("rdlen",',
  "None),\n",
  '                   DNSStrField("algo_name",',
  '"hmac-sha1"),\n',
  '                   TimeSignedField("time_signed",',
  "0),\n",
  '                   ShortField("fudge",',
  "0),\n",
  '                   FieldLenField("mac_len",',
  "20,",
  'fmt="!H",',
  'length_of="mac_data"),\n',
  '                   StrLenField("mac_data",',
  '"",',
  "length_from=lambda",
  "pkt:",
  "pkt.mac_len),\n",
  '                   ShortField("original_id",',
  "0),\n",
  '                   ShortField("error",',
  "0),\n",
  '                   FieldLenField("other_len",',
  "0,",
  'fmt="!H",',
  'length_of="other_data"),\n',
  '                   StrLenField("other_data",',
  '"",',
  "length_from=lambda",
  "pkt:",
  "pkt.other_len)\n",
  "                   ]\n",
  "\n",
  "\n",
  "DNSRR_DISPATCHER",
  "=",
  "{\n",
  "    6:",
  "DNSRRSOA,\n",
  "    15:",
  "DNSRRMX,\n",
  "    33:",
  "DNSRRSRV,\n",
  "    41:",
  "DNSRROPT,\n",
  "    43:",
  "DNSRRDS,\n",
  "    46:",
  "DNSRRRSIG,\n",
  "    47:",
  "DNSRRNSEC,\n",
  "    48:",
  "DNSRRDNSKEY,\n",
  "    50:",
  "DNSRRNSEC3,\n",
  "    51:",
  "DNSRRNSEC3PARAM,\n",
  "    250:",
  "DNSRRTSIG,\n",
  "    32769:",
  "DNSRRDLV,\n",
  "}\n",
  "\n",
  "DNSSEC_CLASSES",
  "=",
  "tuple(six.itervalues(DNSRR_DISPATCHER))\n",
  "\n",
  "\n",
  "def",
  "isdnssecRR(obj):\n",
  "    return",
  "isinstance(obj,",
  "DNSSEC_CLASSES)\n",
  "\n",
  "\n",
  "class",
  "DNSRR(InheritOriginDNSStrPacket):\n",
  "    name",
  "=",
  '"DNS',
  "Resource",
  'Record"\n',
  "    show_indent",
  "=",
  "0\n",
  "    fields_desc",
  "=",
  '[DNSStrField("rrname",',
  '""),\n',
  '                   ShortEnumField("type",',
  "1,",
  "dnstypes),\n",
  '                   ShortEnumField("rclass",',
  "1,",
  "dnsclasses),\n",
  '                   IntField("ttl",',
  "0),\n",
  '                   FieldLenField("rdlen",',
  "None,",
  'length_of="rdata",',
  'fmt="H"),\n',
  "                   MultipleTypeField(\n",
  "                       [\n",
  '                           (IPField("rdata",',
  '"0.0.0.0"),\n',
  "                               lambda",
  "pkt:",
  "pkt.type",
  "==",
  "1),\n",
  '                           (IP6Field("rdata",',
  '"::"),\n',
  "                               lambda",
  "pkt:",
  "pkt.type",
  "==",
  "28),\n",
  '                           (DNSStrField("rdata",',
  '"",\n',
  "                                        length_from=lambda",
  "pkt:",
  "pkt.rdlen),\n",
  "                               lambda",
  "pkt:",
  "pkt.type",
  "in",
  "[2,",
  "3,",
  "4,",
  "5,",
  "12]),\n",
  '                           (DNSTextField("rdata",',
  "[],\n",
  "                                         length_from=lambda",
  "pkt:",
  "pkt.rdlen),\n",
  "                               lambda",
  "pkt:",
  "pkt.type",
  "==",
  "16),\n",
  "                       ],\n",
  '                       StrLenField("rdata",',
  '"",\n',
  "                                   length_from=lambda",
  "pkt:pkt.rdlen)\n",
  "    )]\n",
  "\n",
  "\n",
  "bind_layers(UDP,",
  "DNS,",
  "dport=5353)\n",
  "bind_layers(UDP,",
  "DNS,",
  "sport=5353)\n",
  "bind_layers(UDP,",
  "DNS,",
  "dport=53)\n",
  "bind_layers(UDP,",
  "DNS,",
  "sport=53)\n",
  "DestIPField.bind_addr(UDP,",
  '"224.0.0.251",',
  "dport=5353)\n",
  "DestIP6Field.bind_addr(UDP,",
  '"ff02::fb",',
  "dport=5353)\n",
  "bind_layers(TCP,",
  "DNS,",
  "dport=53)\n",
  "bind_layers(TCP,",
  "DNS,",
  "sport=53)\n",
  "\n",
  "\n",
  "@conf.commands.register\n",
  "def",
  "dyndns_add(nameserver,",
  "name,",
  "rdata,",
  'type="A",',
  "ttl=10):\n",
  "    zone",
  "=",
  'name[name.find(".")',
  "+",
  "1:]\n",
  "    r",
  "=",
  "sr1(IP(dst=nameserver)",
  "/",
  "UDP()",
  "/",
  "DNS(opcode=5,\n",
  "                                             qd=[DNSQR(qname=zone,",
  'qtype="SOA")],\n',
  "                                             ns=[DNSRR(rrname=name,",
  'type="A",\n',
  "                                                       ttl=ttl,",
  "rdata=rdata)]),\n",
  "            verbose=0,",
  "timeout=5)\n",
  "    if",
  "r",
  "and",
  "r.haslayer(DNS):\n",
  "        return",
  "r.getlayer(DNS).rcode\n",
  "    else:\n",
  "        return",
  "-1\n",
  "\n",
  "\n",
  "@conf.commands.register\n",
  "def",
  "dyndns_del(nameserver,",
  "name,",
  'type="ALL",',
  "ttl=10):\n",
  "    zone",
  "=",
  'name[name.find(".")',
  "+",
  "1:]\n",
  "    r",
  "=",
  "sr1(IP(dst=nameserver)",
  "/",
  "UDP()",
  "/",
  "DNS(opcode=5,\n",
  "                                             qd=[DNSQR(qname=zone,",
  'qtype="SOA")],\n',
  "                                             ns=[DNSRR(rrname=name,",
  "type=type,\n",
  '                                                       rclass="ANY",',
  "ttl=0,",
  'rdata="")]),\n',
  "            verbose=0,",
  "timeout=5)\n",
  "    if",
  "r",
  "and",
  "r.haslayer(DNS):\n",
  "        return",
  "r.getlayer(DNS).rcode\n",
  "    else:\n",
  "        return",
  "-1\n",
  "\n",
  "\n",
  "class",
  "DNS_am(AnsweringMachine):\n",
  "    function_name",
  "=",
  '"dns_spoof"\n',
  "    filter",
  "=",
  '"udp',
  "port",
  '53"\n',
  "    cls",
  "=",
  "DNS\n",
  "\n",
  "    def",
  "parse_options(self,",
  "joker=None,\n",
  "                      match=None,",
  "joker6=None,",
  "from_ip=None):\n",
  "        if",
  "match",
  "is",
  "None:\n",
  "            self.match",
  "=",
  "{}\n",
  "        else:\n",
  "            self.match",
  "=",
  "match\n",
  "        self.joker",
  "=",
  "joker\n",
  "        self.joker6",
  "=",
  "joker6\n",
  "        if",
  "isinstance(from_ip,",
  "str):\n",
  "            self.from_ip",
  "=",
  "Net(from_ip)\n",
  "        else:\n",
  "            self.from_ip",
  "=",
  "from_ip\n",
  "\n",
  "    def",
  "is_request(self,",
  "req):\n",
  "        from",
  "scapy.layers.inet6",
  "import",
  "IPv6\n",
  "        return",
  "(\n",
  "            req.haslayer(self.cls)",
  "and\n",
  "            req.getlayer(self.cls).qr",
  "==",
  "0",
  "and\n",
  "            (not",
  "self.from_ip",
  "or",
  "(\n",
  "                req[IPv6].src",
  "in",
  "req",
  "if",
  "IPv6",
  "in",
  "req",
  "else",
  "req[IP].src\n",
  "            )",
  "in",
  "self.from_ip)\n",
  "        )\n",
  "\n",
  "    def",
  "make_reply(self,",
  "req):\n",
  "        IPcls",
  "=",
  "IPv6",
  "if",
  "IPv6",
  "in",
  "req",
  "else",
  "IP\n",
  "        resp",
  "=",
  "IPcls(dst=req[IPcls].src)",
  "/",
  "UDP(sport=req.dport,",
  "dport=req.sport)\n",
  "        dns",
  "=",
  "req.getlayer(self.cls)\n",
  "        if",
  "req.qd.qtype",
  "==",
  "28:\n",
  "            if",
  "self.joker6",
  "is",
  "False:\n",
  "                return\n",
  "            rdata",
  "=",
  "self.match.get(\n",
  "                dns.qd.qname,\n",
  "                self.joker",
  "or",
  'get_if_addr6(self.optsniff.get("iface",',
  "conf.iface))\n",
  "            )\n",
  "            if",
  "isinstance(rdata,",
  "(tuple,",
  "list)):\n",
  "                rdata",
  "=",
  "rdata[1]\n",
  "            resp",
  "/=",
  "self.cls(id=dns.id,",
  "qr=1,",
  "qd=dns.qd,\n",
  "                             an=DNSRR(rrname=dns.qd.qname,",
  "ttl=10,",
  "rdata=rdata,\n",
  "                                      type=28))\n",
  "        else:\n",
  "            if",
  "self.joker",
  "is",
  "False:\n",
  "                return\n",
  "            rdata",
  "=",
  "self.match.get(\n",
  "                dns.qd.qname,\n",
  "                self.joker",
  "or",
  'get_if_addr(self.optsniff.get("iface",',
  "conf.iface))\n",
  "            )\n",
  "            if",
  "isinstance(rdata,",
  "(tuple,",
  "list)):\n",
  "                rdata",
  "=",
  "rdata[0]\n",
  "            resp",
  "/=",
  "self.cls(id=dns.id,",
  "qr=1,",
  "qd=dns.qd,\n",
  "                             an=DNSRR(rrname=dns.qd.qname,",
  "ttl=10,",
  "rdata=rdata))\n",
  "        return",
  "resp\n",
];

export { codeItems };
